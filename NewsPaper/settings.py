"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config,Csv,RepositoryEnv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default="")
SECRET_KEY = "django-insecure-adkfe%%i%c4cjvnd35j0#ph+8+q&(v9+)_!=uuw&t%rmwyj3gg"


ALLOWED_HOSTS = []
# ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv(), default ="")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites', # `allauth` needs this from django. In shell python manage.py migrate 
    'django.contrib.staticfiles',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google', # https://console.developers.google.com/
    'django_filters',
    'widget_tweaks',  
    'django_extensions',
    'django_apscheduler',

    'news', #TODO: надо доделать нотификацию менеджмента
    'accounts',
    'user',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'news.middleware.mobile_or_full_middleware.MobileOrFullMiddleware',
    # 'news.middleware.mobile_or_full_middleware.MobileOrFullMiddleware'
]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request', # `allauth` needs this from django
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

SESSION_REMEMBER=False

LOGIN_URL = '/oauth/login/'
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default ="")
# LOGIN_URL = '/accounts/login/' #- до  использования формы allauth
LOGIN_REDIRECT_URL = '/'

ACCOUNT_FORMS = {    
    'signup': 'accounts.forms.CustomSignupForm',
    'login':'accounts.forms.MyLoginForm'
}

SITE_ID = 1

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend', # Needed to login by username in Django admin, regardless of `allauth`
    'allauth.account.auth_backends.AuthenticationBackend', # `allauth` specific authentication methods, such as login by e-mail
]
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_SESSION_REMEMBER = False
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_CONFIRM_EMAIL_ON_GET = True

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# STATICFILES_DIRS = [
#     BASE_DIR / "static"
# ]

STATICFILES_DIRS = [
    ('static', './'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST', default='localhost')  # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = config('EMAIL_PORT', default=25, cast=int) # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = config("EMAIL_HOST_USER", default='') # ваше имя пользователя, например если ваша почта user@yandex.ru, то сюда надо писать user, иными словами, это всё то что идёт до собаки
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", default='') # пароль от почты
EMAIL_USE_SSL = True # Яндекс использует ssl, подробнее о том, что это, почитайте на Википедии, но включать его здесь обязательно


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'), # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
    }
}

if not DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# 404 ошибка будет выводиться при запросе несуществующего поста
# DEBUG = False
ALLOWED_HOSTS = ['*']

ADMINS = (
      ('Olga Ko', 'data19101988@gmail.com'),
      )

FORMATTERS = (
    {
        # "verbose": {
        #     "format": "{levelname} {asctime:s} {name} {threadName} {thread:d} {module} {filename} {lineno:d} {name} {funcName} {process:d} {message}",
        #     "style": "{",
        # },
        "verbose_to_file_info": {
            "format": "{asctime:s} {levelname} {module} {message}",
            "style": "{",
        },
        "verbose_to_file_error": {
            "format": "{asctime:s} {levelname} {message} {exc_info}",
            "style": "{",
        },
        "verbose_email_error": {
            "format": "{asctime:s} {levelname} {message}",
            "style": "{",
        },
        
        "simple_console": {
            "format": "{asctime:s} {levelname} {message}",
            "style": "{",
        },
        "simple_warning": {
            "format": "{asctime:s} {levelname} {message} {pathname}",
            "style": "{",
        },
        "simple_error": {
            "format": "{asctime:s} {levelname} {message} {exc_info}",
            "style": "{",
        },
        # "simple": {
        #     "format": "{levelname} {asctime:s} {name} {module} {filename} {lineno:d} {funcName} {message}",
        #     "style": "{",
        # },
    },
)

FILTERS = {  
    "require_debug_false": {
        "()": "django.utils.log.RequireDebugFalse",
    },
    "require_debug_true": {
        "()": "django.utils.log.RequireDebugTrue",
    },
}

HANDLERS = {
    "console_handler_debug": {
        "class": "logging.StreamHandler",
        "filters": ["require_debug_true"],
        "formatter": "simple_console",
        "level": "DEBUG",
    },
    "console_handler_warning": {
        "class": "logging.StreamHandler",
        "filters": ["require_debug_true"],
        "formatter": "simple_warning",
        "level": "WARNING",
    },
    "console_handler_error": {
        "class": "logging.StreamHandler",
        "filters": ["require_debug_true"],
        "formatter": "simple_error",
        "level": "ERROR",
    },


    "file_handler_info": {
        "class": "logging.handlers.RotatingFileHandler",
        "filters": ["require_debug_false"],
        "filename": f"{BASE_DIR}/logs/general.log",
        "mode": "a",
        "encoding": "utf-8",
        "formatter": "verbose_to_file_info",
        "level": "INFO",
        "backupCount": 5,
        "maxBytes": 1024 * 1024 * 5,  # 5 MB
    },
    "file_handler_error": {
        "class": "logging.handlers.RotatingFileHandler",
        "filename": f"{BASE_DIR}/logs/errors.log",
        "mode": "a",
        "formatter": "verbose_to_file_error",
        "level": "ERROR",
        "backupCount": 5,
        "maxBytes": 1024 * 1024 * 5,  # 5 MB
    },
    "file_handler_security": {
        "class": "logging.handlers.RotatingFileHandler",
        "filename": f"{BASE_DIR}/logs/security.log",
        "mode": "a",
        "formatter": "verbose_to_file_info",
        "level": "INFO",
        "backupCount": 5,
        "maxBytes": 1024 * 1024 * 5,  # 5 MB
    },


    'mail_admins': {
        'level': 'ERROR',
        "formatter": "verbose_email_error",
        "filters": ["require_debug_false"],
        "class": "django.utils.log.AdminEmailHandler",
        "email_backend": "django.core.mail.backends.filebased.EmailBackend",
    },
}
LOGGERS = (
    {
        # Логгер верхнего уровня, который принимает все сообщения, 
        # но непосредственно в него ничего не записывается. 
        # Все сообщения, поступающие в него распределяются по дочерним логгерам.
        "django": { # родительский логер Django логирует всё (отдает обработчику console_handler), к чему его родительский логер имеет доступ
            "handlers": ["console_handler_debug",
                         "console_handler_warning",
                         "console_handler_error", 
                         "file_handler_info", 
                        ], # родительский логер ссылается на console_handler
            "level": "DEBUG", # уровень логирования -
        },
        "django.request": {
            "handlers": ["file_handler_error", "mail_admins"],
            "level": "ERROR",
            "propagate": True,
        },
        "django.template": {
            "handlers": ["file_handler_error"],
            "level": "ERROR",  # Самый низкий уровень логирования информации, предназначенный для отладки.
            "propagate": True,
        },
        "django.server": {
            "handlers": ["file_handler_error", "mail_admins"],
            "level": "ERROR",
            "propagate": True,
        },
        "django.db.backends": {
            'level': 'ERROR',
            'handlers': ['file_handler_error'],
        },
        "django.security": {
            'level': 'WARNING',
            'handlers': ['file_handler_security'],
        }
    },
)


# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "filters": FILTERS,
#     "formatters": FORMATTERS[0],
#     "handlers": HANDLERS,
#     "loggers": LOGGERS[0],   
# }

# LOGGERS = {
#     {
#         'django': {
#             'handlers': ['console_handler', 'info_handler'],
#             'level': 'INFO',
#             'propagate': True,
#         },
#         'django.request': {
#             'handlers': ['error_handler'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#         'django.template': {
#             'handlers': ['error_handler'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#         'django.server': {
#             'handlers': ['error_handler'],
#             'level': 'INFO',
#             'propagate': True,
#         },
#         # 'django.request': {
#         #     'handlers': ['mail_admins'],
#         #     'level': 'ERROR',
#         #     'propagate': False,
#         # },
#     },
# }

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'verbose': {
#            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
#         },
#         'debug_format': {
#             'format': '%(asctime)s %(levelname)s %(message)s'
#         },
#         'warning_format': {
#             'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s'
#         }
#     },
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#     },
#     'handlers': {
#         'console_handler': {
#             'level': 'DEBUG',
#             'filters': ['require_debug_true'],
#             'class': 'logging.StreamHandler',
#             'formatter': 'simple'
#         },
#          'console': {
#             'level': 'WARNING',
#             'filters': ['require_debug_true'],
#             'class': 'logging.StreamHandler',
#             'formatter': 'warning_format'
#         },
#         'mail_admins': {
#             'level': 'ERROR',
#             'class': 'django.utils.log.AdminEmailHandler'
#         },
#         'mail_admins': {
#             'level': 'CRITICAL',
#             'class': 'django.utils.log.AdminEmailHandler'
#         },
#     },
# }